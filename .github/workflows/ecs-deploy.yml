name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}           # set this to your Amazon ECR repository name
  ECS_SERVICE: ${{ secrets.ECR_SERVICE }}                 # set this to your Amazon ECS service name
  ECS_CLUSTER: ${{ secrets.ECR_CLUSTER }}                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}           # set this to the name of the container in the
  APPLICATION_YML: ${{ secrets.APPLICATION_YML }}
  APPLE_P8_FILE_NAME: ${{ secrets.APPLE_P8_FILE_NAME }}
  APPLE_P8_KEY: ${{ secrets.APPLE_P8_KEY }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: insert files
      - uses: actions/checkout@v4
      - run: sudo touch ./src/main/resources/application.yml
      - run: sudo mkdir -p ./src/main/resources/key
      - run: sudo touch ./src/main/resources/key/${{env.APPLE_P8_FILE_NAME}}
      - run: sudo echo "${{env.APPLICATION_YML}}" > ./src/main/resources/application.yml
      - run: sudo echo "${{env.APPLE_P8_KEY}}" > ./src/main/resources/key/${{env.APPLE_P8_FILE_NAME}}


      - name: Grant execute permission for gradlew
        run: sudo chmod +x ./gradlew

      - name: Build Gradle
        run: sudo ./gradlew clean build -x test

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          sudo docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          sudo docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          sudo echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true